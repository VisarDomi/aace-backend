local computer
ssh-keygen, sourcetree preferred auth ssh
git config --global credential.helper 'cache --timeout 3600000'
git config --global user.name "Visar Domi"
git config --global user.email "visardomi4@gmail.com"

end local computer



server computer

1. login:
ssh root@159.65.127.70
Password:
31e6b130536e58a3028d027c27

2. create user ubuntu:
adduser --gecos "" ubuntu
password: password
usermod -aG sudo ubuntu
su ubuntu

3. create ssh keys with no password:
ssh-keygen

4. add public keys of people so they can enter to the server with ssh. tip: you can make those keys by typing ssh-keygen into git bash:
echo ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDrtaMyFIQVZQEen9ey8rHuJCTw5b4tkgA1vwYfGAuVc7XTeja9dmHdZJmS2DuHyDbzUxldgmJPFOAUXphaqaZNmswUd6s/Y7tBHgtbndBK/C80qxYk60qA0hXpOXhl3F5W7Ytmp6Z7uQwnSrJOizcTrLPLB6+F5p8jh4VPijJFbMvwgS8Z/oW4jCStyH4lAY1lfuWcj94MCg6wjAPIg6+lTzke3R5NYD9NzuNuKL8txDV0mCsBdfrbMYcChQiIOAbFvsXY7G2ycVeptGLgTexKC/y3ZFyrCZ6Szx1riN0OBIXy7L8iV5tGBoKEp2LU+wP3L+QOH/yiOWuDhVjQZmr1 Visar@DESKTOP-CRDHVP6 >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys

5. logout of server (exit, exit) and login again with:
ssh ubuntu@159.65.127.70

6. remove ubuntu password:
sudo visudo

7. write at the end of file:
# Remove password for user ubuntu
ubuntu ALL=(ALL) NOPASSWD: ALL

!warning: do the following 3 steps at the same session, or you will need to reformat the server
8.1. removing password login:
sudo nano /etc/ssh/sshd_config

8.2. change these values from yes to no:
PermitRootLogin no
PasswordAuthentication no

8.3. install ufw firewall:
sudo apt-get install -y ufw
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow 443/tcp
sudo ufw --force enable
sudo ufw status


9. install some things on server (but not mysql) with default values:
sudo apt-get -y update
sudo apt-get -y install python3 python3-venv python3-dev
sudo apt-get -y install postfix supervisor nginx git


10. clone the repository in home/ubuntu:
go to aace-backend in bitbucket and select clone and select https and copy it

11. paste it in server:
git clone https://VisarDomi@bitbucket.org/verweb/aace-backend.git
cd aace-backend

12. sudo apt install pipenv -y

13. install postgres:
sudo apt install -y postgresql postgresql-contrib -y

14. delete Pipfile.lock
rm -rf Pipfile.lock

15. pipenv shell

16. pipenv install

17. copy paste local variables into .env and .flaskenv

18. add FLASK_APP environment variable:
echo "export FLASK_APP=aace.py" >> ~/.profile

19. Login and logout from server:
exit
ssh ubuntu@159.65.127.70
cd aace-backend
pipenv shell


change password for postgres:
20 edit file:
sudo nano /etc/postgresql/11/main/pg_hba.conf

change line from peer to trust:
local   all             postgres                                peer
to:
local   all             postgres                                trust

21
sudo service postgresql restart

22 changing password:
psql -U postgres
ALTER USER postgres with password 'postgres';

23.a change line from trust to md5:
local   all             postgres                                trust
to:
local   all             postgres                                md5

24
sudo service postgresql restart


25. Login and logout from server:
exit
ssh ubuntu@159.65.127.70
cd aace-backend
pipenv shell

26. Login with password 'postgres':
psql -U postgres
create database aace;
\q

27 upgrade database:
alembic upgrade head

28 create admin:
flask shell
copy paste from after_resetting_database.py

Setup supervisorctl:
29 open file:
sudo nano /etc/supervisor/conf.d/aace.conf

30 paste the following:
[program:aace]
command=/home/ubuntu/.virtualenvs/aace-backend-klOTBomT/bin/gunicorn -b localhost:5000 -w 4 aace:app
directory=/home/ubuntu/aace-backend
user=ubuntu
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true

31. reload supervisorctl:
sudo supervisorctl reload
sudo supervisorctl start aace

Setup nginx:
32 remove default config if it exists:
sudo rm /etc/nginx/sites-enabled/default

33 add config:
sudo nano /etc/nginx/sites-enabled/aace

33.2 before copy pasting:
sudo mkdir /etc/nginx/ssl
sudo openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
chmod 400 /etc/nginx/ssl/*

34 copy paste the following into the file:

# read more at https://terrty.net/2014/ssl-tls-in-nginx/
# latest version on https://gist.github.com/paskal/628882bee1948ef126dd/126e4d1daeb5244aacbbd847c5247c2e293f6adf
# security test score: https://www.ssllabs.com/ssltest/analyze.html?d=aace.ml
# your nginx version might not have all directives included, test this configuration before using in production against your nginx:
# $ nginx -c /etc/nginx/nginx.conf -t

server {
        # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
        # to generate your dhparam.pem file, run in the terminal:
        # $ openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # don't forget to set secure rights to these files:
        # $ chmod 400 /etc/nginx/ssl/*

        # http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_cache
        # make it bigger for more sessions, one megabyte for ~ 4000 session
        ssl_session_cache shared:SSL:100m;
        ssl_session_timeout 60m;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

        # ciphers are latest modern from https://wiki.mozilla.org/Security/Server_Side_TLS (only place you can trust on web)
        # working example:
        # ssl_ciphers 'EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DES';       
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;
        # dns resolver, we're using Google IPv4 and IPv6 servers
        resolver 8.8.8.8 [2001:4860:4860::8888];
        # verify chain of trust of OCSP response using Root CA and Intermediate certs, example for StartSSL:
        # $ wget -O - https://www.startssl.com/certs/ca.pem https://www.startssl.com/certs/class1/sha2/pem/sub.class1.server.sha2.ca.pem | tee -a ca-certs.pem > /dev/null
        ssl_trusted_certificate /etc/letsencrypt/live/aace.ml/chain.pem;

        # consider turning 'deferred' off on old versions of nginx if you occur any problems
        listen 443 deferred ssl;
        listen [::]:443 deferred ssl ipv6only=on;
        server_name aace.ml;

        # location of the self-signed SSL certificate
        # (non-existent, not needed) temporary
        ssl_certificate /etc/letsencrypt/live/aace.ml/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/aace.ml/privkey.pem; # managed by Certbot

        # write access and error logs to /var/log
        access_log /var/log/aace_access.log;
        error_log /var/log/aace_error.log;

        location / {
            # forward application requests to the gunicorn server
            proxy_pass http://localhost:5000;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /static {
            # handle static files directly, without forwarding to the application
            alias /home/ubuntu/aace-backend/static;
        }

        charset utf-8;

        #don't send the nginx version number in error pages and Server header
        server_tokens off;

        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        # http://nginx.org/en/docs/http/ngx_http_headers_module.html
        # enabling HSTS(HTTP Strict Transport Security)
        # https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
        add_header Strict-Transport-Security 'max-age=63072000';
        
        
        # config to don't allow the browser to render the page inside an frame or
        # iframe and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        # if you need to allow [i]frames, you can use SAMEORIGIN
        # or set an uri with ALLOW-FROM uri
        # warning, this option breaking some analitics tools
        add_header X-Frame-Options DENY;

        # when serving user-supplied content, include a
        # X-Content-Type-Options: nosniff header along with the Content-Type:
        # header to disable content-type sniffing on some browsers.
        # https://github.com/blog/1482-heads-up-nosniff-header-support-coming-to-chrome-and-firefox
        add_header X-Content-Type-Options nosniff;

        # this header enables the Cross-site scripting (XSS) filter, it's usually
        # enabled by default anyway, so the role of this header is to re-enable
        # the filter for this particular website if it was disabled by the user.
        add_header X-XSS-Protection "1; mode=block";

        # deny access to files, starting with dot (hidden) or ending with ~ (temp)

        location ~ /\. {
                access_log off;
                log_not_found off;
                deny all;
        }

        location ~ ~$ {
                access_log off;
                log_not_found off;
                deny all;
        }

        # block of rules for static content

        location ~ /(favicon.ico|favicon.png|robots.txt)$ {
                access_log off;
                log_not_found off;
                expires 1y;
                add_header Cache-Control public,max-age=259200;
        }

        location ~*  \.(jpg|jpeg|png|gif|ico|css|js|mp3)$ {
                expires 30d;
                add_header Cache-Control public,max-age=259200;
        }

}

server {
        if ($host = aace.ml) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        # catch all unsecure requests (both IPv4 and IPv6)
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        server_name aace.ml;
        location / {
            # redirect any requests to the same URL but on https
            return 301 https://$host$request_uri;
        }

}

35. reload nginx:
sudo service nginx start
sudo service nginx reload

Site is online (unsafe connection) at 159.65.127.70

Real certificates with auto renewal:
36. at freenom.com go to:
services -> my domains -> aace-backend.ml -> manage domains -> manage freedom dns -> add records

37. at target add the ip address:
Name	Type	TTL	  Target
A     3600  159.65.127.70
save changes

38. Install certbot:
sudo apt-get update

sudo apt-get install -y software-properties-common

sudo add-apt-repository universe

sudo add-apt-repository ppa:certbot/certbot
press enter to continue

sudo apt-get update

sudo apt-get install -y python-certbot-nginx

39. get certificate:
sudo certbot --nginx
enter domain name: aace-backend.ml
choose: redirect
autorenew is on by default

#---------------------------------------
Now site is live at:
https://aace-backend.ml

Deploying updates:

git pull
sudo supervisorctl stop aace
alembic upgrade head
sudo supervisorctl start aace

end server computer

40. aace only, increase upload file size
sudo nano /etc/nginx/nginx.conf
at http context add the line:
client_max_body_size 64M;
